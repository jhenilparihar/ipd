import React, { useState,useEffect } from 'react'
import axios from 'axios'
import { ScaleLoader } from 'react-spinners'
import { toast } from 'react-toastify'

const PredictDiseaseFromSymptoms = () => {

  const [options, setOptions] = useState([]);
  const [to, setTo] = useState('en');
  const [from, setFrom] = useState('en');
  const [input, setInput] = useState('');
  const [output, setOutput] = useState('');


    const [symptoms, setSymptoms] = useState([])
    const [data, setData] = useState(null)
    const [loading, setLoading] = useState(false)


    const translate = () => {
        // curl -X POST "https://libretranslate.de/translate" -H  "accept: application/json" -H  "Content-Type: application/x-www-form-urlencoded" -d "q=hello&source=en&target=es&api_key=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
       
        const params = new URLSearchParams();
        params.append('q', data.Treatment
        );
        params.append('source', from);
        params.append('target', to);
        params.append('api_key', 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
    
        axios.post('https://libretranslate.de/translate',params, {
          headers: {
            'accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded',
          },
        }).then(res=>{
          console.log(res.data)
          setOutput(res.data.translatedText)
        })
      };
  
    useEffect(() => {
      axios
        .get('https://libretranslate.de/languages', {
          headers: { accept: 'application/json' },
        })
        .then((res) => {
          console.log(res.data);
          setOptions(res.data);
        });
    }, []);


    const onEnterPress = async (event) => {
        if (event.key === 'Enter') {
            if (symptoms.length === 0) {
                toast.error('Please enter the symptoms')
                return
            }
            setData(null)
            setLoading(true)
            try {
                const response = await axios.post('http://localhost:5000/predictDisease', {
                    symptoms: symptoms
                })
    
                const data = response.data
                setData(data.data)
            }
            catch (error) {
                console.log(error)
            }
            finally {
                setLoading(false)
                setSymptoms('')
            }
        }
    }

    return (
        <div className='w-[60%] ml-auto mr-auto flex flex-col items-center '>


<div>
        From ({from}) :
        <select onChange={(e) => setFrom(e.target.value)}>
          {options.map((opt) => (
            <option key={opt.code} value={opt.code}>
              {opt.name}
            </option>
          ))}
        </select>
        To ({to}) :
        <select onChange={(e) => setTo(e.target.value)}>
          {options.map((opt) => (
            <option key={opt.code} value={opt.code}>
              {opt.name}
            </option>
          ))}
        </select>
      </div>
      <button onClick={e=>translate()}>Translate</button>

            <div className='text-[26px] m-[10px] mb-[60px] border-b-[1px] border-[#ababad]'>
                Predict Disease From Symptoms
            </div>

            {data !== null && <div className='flex flex-col w-full font-medium text-[24px]'>
                <div className='text-[24px]'>
                    <span className='text-dark2 mr-[15px]'>Symptoms &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </span>
                    {data.symptoms}
                </div>
                <div className='text-[24px] mt-[20px]'>
                    <span className='text-dark2 mr-[15px]'>Disease Name &nbsp;: </span>
                {data.DiseaseName}</div>
                <div className='text-[24px] mt-[20px]'>
                    <span className='text-dark2 mr-[15px]'>Treatments &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </span>
                </div>
                <div className='flex flex-col gap-y-[15px] mt-[30px]'>
                {data.Treatment.map((d, index) => {
                    return (
                        <div className='flex flex-row gap-x-[10px]'>
                            <div>{index+1}.</div>
                            <div>{d.treatmentName} : {d.treatment}</div>
                        </div>
                    )
                })}
                </div>
            </div>}

            {loading &&
                <div className='flex flex-col gap-y-[10px] items-center justify-center m-auto text-[16px] text-[#606060]'>
                    <ScaleLoader  color='#7C3AED'/>
                    Hold on!
                </div>
            }

            <input className='h-[50px] w-full ml-auto mr-auto  mb-[50px] rounded-[10px] bg-purple-light border-[1px] border-purple-dark px-[30px] box-border text-[#000000] outline-none mt-[50px]' 
                placeholder='Enter The symptoms you are facing...'
                value={symptoms}
                onKeyDown={onEnterPress}
                onChange={(event) => {
                    setSymptoms(event.target.value)
                }}
            />
        </div>
    )
}

export default PredictDiseaseFromSymptoms
